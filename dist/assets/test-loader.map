{"version":3,"sources":["app/test-loader.js","start.js"],"sourcesContent":["/* globals requirejs, require */\n(function() {\ndefine(\"ember-cli/test-loader\",\n  [],\n  function() {\n    \"use strict\";\n\n    var TestLoader = function() {\n    };\n\n    TestLoader.prototype = {\n      shouldLoadModule: function(moduleName) {\n        return (moduleName.match(/[-_]test$/));\n      },\n\n      loadModules: function() {\n        var moduleName;\n\n        for (moduleName in requirejs.entries) {\n          if (this.shouldLoadModule(moduleName)) {\n            this.require(moduleName);\n          }\n        }\n      }\n    };\n\n    TestLoader.prototype.require = function(moduleName) {\n      try {\n        require(moduleName);\n      } catch(e) {\n        this.moduleLoadFailure(moduleName, e);\n      }\n    };\n\n    TestLoader.prototype.moduleLoadFailure = function(moduleName, error) {\n      console.error('Error loading: ' + moduleName, error.stack);\n    };\n\n    TestLoader.load = function() {\n      new TestLoader().loadModules();\n    };\n\n    return {\n      'default': TestLoader\n    }\n  }\n);\n})();\n","/*global QUnit, blanket, mocha, moduleLoaderFinish, $ */\n\nfunction sendCoverage() {\n\t$.ajax({\n\t\ttype: 'POST',\n\t\turl:'/write-blanket-coverage',\n\t\tdatatype: 'json',\n\t\tcontentType:'application/json; charset=utf-8',\n\t\tdata: JSON.stringify(window._$blanket_coverageData)\n\t  });\n}\n\nvar origBlanketOnTestsDone = blanket.onTestsDone;\n\nfunction cliFinish() {\n  // annotate all files that match but were never referenced\n\tmoduleLoaderFinish();\n\torigBlanketOnTestsDone.apply(blanket);\n\tsendCoverage();\n}\n\nblanket.onTestsDone = cliFinish;\n\nif (typeof(QUnit) === 'object') {\n  QUnit.config.autostart = blanket.options('cliOptions').autostart !== false;\n}\nelse if (typeof(mocha) === 'object') {\n\n    /*\n    * Mocha-BlanketJS adapter\n    * Adds a BlanketJS coverage report at the bottom of the HTML Mocha report\n    * Only needed for in-browser report; not required for the grunt/phantomjs task\n    *\n    * Distributed as part of the grunt-blanket-mocha plugin\n    * https://github.com/ModelN/grunt-blanket-mocha\n    * (C)2013 Model N, Inc.\n    * Distributed under the MIT license\n    *\n    * Code originally taken from the BlanketJS project:\n    * https://github.com/alex-seville/blanket/blob/master/src/adapters/mocha-blanket.js\n    * Distributed under the MIT license\n    */\n    (function() {\n\n        if(!mocha) {\n            throw new Error(\"mocha library does not exist in global namespace!\");\n        }\n\n\n        /*\n         * Mocha Events:\n         *\n         *   - `start`  execution started\n         *   - `end`  execution complete\n         *   - `suite`  (suite) test suite execution started\n         *   - `suite end`  (suite) all tests (and sub-suites) have finished\n         *   - `test`  (test) test execution started\n         *   - `test end`  (test) test completed\n         *   - `hook`  (hook) hook execution started\n         *   - `hook end`  (hook) hook complete\n         *   - `pass`  (test) test passed\n         *   - `fail`  (test, err) test failed\n         *\n         */\n\n        var originalReporter = mocha._reporter;\n\n        var blanketReporter = function(runner) {\n                runner.on('start', function() {\n                  blanket.setupCoverage();\n                });\n\n                runner.on('end', function() {\n                  blanket.onTestsDone();\n                });\n                runner.on('suite', function() {\n                    blanket.onModuleStart();\n                });\n\n                runner.on('test', function() {\n                    blanket.onTestStart();\n                });\n\n                runner.on('test end', function(test) {\n                    blanket.onTestDone(test.parent.tests.length, test.state === 'passed');\n                });\n\n                //I dont know why these became global leaks\n                runner.globals(['stats', 'failures', 'runner', '_$blanket']);\n\n                originalReporter.apply(this, [runner]);\n            };\n\n\n        // From mocha.js HTML reporter\n        blanketReporter.prototype.suiteURL = function(suite){\n          return '?grep=' + encodeURIComponent(suite.fullTitle());\n        };\n\n        blanketReporter.prototype.testURL = function(test){\n          return '?grep=' + encodeURIComponent(test.fullTitle());\n        };\n\n        mocha.reporter(blanketReporter);\n    })();\n}\n"],"names":[],"mappingsfile":"test-loader.js"}