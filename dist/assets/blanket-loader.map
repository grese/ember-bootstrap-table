{"version":3,"sources":["blanket-reporter.js","blanket-require.js"],"sourcesContent":["/*global blanket */\n(function() {\n  //TODO: Refactor/cleanup\n  blanket.customReporter = function(coverageData) {\n    var fileCoverage = [];\n    // This joy brought to you by pushing addl properties onto array elements\n    for (var x in coverageData.files) {\n      var fileData = coverageData.files[x];\n      fileCoverage.push({\n        fileName: x,\n        lines: fileData,\n        // source: fileData.source,  // currently not included - post request will be too large for most projects\n        branchData: fileData.branchData\n      });\n    }\n    // Create our own data structure to insulate from blanket's internals\n    window._$blanket_coverageData = {\n      fileData: fileCoverage,\n      stats: coverageData.stats\n    };\n    // Call the standard reporter well to get inline data (assuming you're running in browser)\n    blanket.defaultReporter(coverageData);\n  };\n\n})();\n","/* globals QUnit, blanket, requirejs, require:true, moduleLoaderFinish:true */\n\n// This could be a documented capability and move it out of blanket-loader\n// it works, can't put it in test-helper b/c it loads too late\nvar savedRequire = requirejs;\n\nblanket.options('enableCoverage',window.location.search.indexOf('coverage') > -1);\n\nvar blanketLoader = function(moduleName) {\n    blanket.requiringFile(moduleName);\n\n    var module = requirejs.entries[moduleName];\n\n    var dependencies = \"[\";\n    if (module.deps.length > 0) {\n        module.deps.forEach(function (dep) {\n            dependencies = dependencies + \"\\\"\" + dep + \"\\\", \";\n        });\n\n        dependencies = dependencies.substr(0, dependencies.length - 2);\n    }\n    dependencies = dependencies + \"]\";\n\n    var content =\n        \"define(\\\"\" + moduleName + \"\\\", \\n  \" +\n        dependencies + \", \\n\" +\n        module.callback.toString() +\n        \");//# sourceURL=\" + moduleName + \".js\";\n\n    blanket.utils.processFile(\n        content,\n        moduleName,\n        function newLoader() {\n            require(moduleName);\n        },\n        function oldLoader() {\n            require(moduleName);\n        }\n    );\n};\n\n// Defer the start of the test run until a call to QUnit.start() this\n// allows the modules to be loaded/instrumented prior to the test run\nif (typeof(QUnit) === 'object') {\n    QUnit.config.autostart = false;\n}\n\nvar shouldExclude = function(moduleName) {\n    if (moduleName.indexOf(blanket.options('modulePrefix')) === -1) {\n      return true;\n    }\n\n    // Loader exclusions are no longer necessary to fix conflicts with addon modules\n    // but may still be used to remove data coverage for specific files (e.g. config/environment).\n    var exclude = false;\n    if (blanket.options('loaderExclusions')) {\n        blanket.options('loaderExclusions').forEach(function (loaderExclusion) {\n            if (moduleName.indexOf(loaderExclusion) > -1) {\n                exclude = true;\n            }\n        });\n    }\n    return exclude;\n};\n\nvar seen = {};\n\n// proxy require to give us a chance to blanket required files\nif (blanket.options('enableCoverage')) {\n    require  = function(name) {\n        if (typeof(seen[name]) === 'undefined') {\n            seen[name] = true;\n            if (!shouldExclude(name)) {\n                blanketLoader(name);\n            }\n        }\n        return savedRequire(name);\n    };\n    blanket.options('reporter', blanket.customReporter);\n\n}\n\n/*\n * After running all the tests we'll loop over all matching requirejs\n * entries and annotate them so blanket will indicate their non-coverage\n */\nmoduleLoaderFinish = function() {\n  if (blanket.options('enableCoverage')) {\n    for (var moduleName in requirejs.entries) {\n      if (typeof(seen[moduleName]) === 'undefined') {\n        seen[moduleName] = true;\n        if (!shouldExclude(moduleName)) {\n          try {\n            blanketLoader(moduleName);\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n  }\n};\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxfile":"blanket-loader.js"}